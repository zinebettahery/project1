<?php

namespace App\Http\Controllers;
use Stripe\Stripe;
use Stripe\Charge;
use App\Models\Cart;
use App\Models\Product;
use App\Models\Order;
use App\Models\User;
use App\Models\OrderItems;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Mail;
use App\Mail\InvoiceEmail;

class CheckoutController extends Controller
{
    public function index(){
        $cartItems = Cart::getContent();
      
            $total = 0;
           
            foreach ($cartItems as $cartItem) {
          
                if (is_numeric($cartItem->product->price) && is_numeric($cartItem->prod_quantity)) {
                    $total += $cartItem->product->price * $cartItem->prod_quantity;
                }
            }
        return view('Checkout',compact('cartItems','total'));
    }


public function placeorder(Request $request){
    $order = new Order();
    $order->user_id = Auth::id();
    $order->name = $request->input('name');
    $order->lastname = $request->input('lastname');
    $order->adresse = $request->input('adresse');
    $order->city = $request->input('city');
    $order->country = $request->input('country');
    $order->codepostal = $request->input('codepostal');
    $order->tele = $request->input('tele');
    $order->email = $request->input('email');
    $order->tracking_no = 'sharma' . rand(1111, 9999);
  

    $cartItems = Cart::getContent();
    $total = 0;
    foreach ($cartItems as $cartItem) {
        if (is_numeric($cartItem->product->price) && is_numeric($cartItem->prod_quantity)) {
            $total += $cartItem->product->price * $cartItem->prod_quantity;
        }
    }

    $order->total_price = $total; // Assign the total value to the 'total' column
    $order->save();

    foreach ($cartItems as $item) {
        $product = Product::find($item->prod_id);
        if ($product !== null) {
            $price = $product->price; // Assign the price from the product to $price
            
            OrderItems::create([
                'order_id' => $order->id,
                'prod_id' => $item->prod_id,
                'qty' => $item->prod_quantity,
                'price' => $price,
            ]);

            $product->quantity = $product->quantity - $item->prod_quantity;
            $product->save();
        }
    }

    if (Auth::user()->adresse == null) {
        $user = User::where('id', Auth::id())->first();
        $user->name = $request->input('name');
        $user->lastname = $request->input('lastname');
        $user->adresse = $request->input('adresse');
        $user->city = $request->input('city');
        $user->country = $request->input('country');
        $user->codepostal = $request->input('codepostal');
        $user->tele = $request->input('tele');
        $user->email = $request->input('email');
        $user->update();
    }



 // Create a charge using Stripe
 Stripe::setApiKey(env('STRIPE_SECRET'));
 try {
     Charge::create([
         'amount' => $total * 100, // Stripe requires the amount in cents
         'currency' => 'usd', // Replace with your desired currency
         'source' => $request->stripeToken, // The token generated by Stripe.js
     ]);

     // ... existing code ...

     

     return redirect('/')
         ->with('status', 'Order placed successfully')
         ->with('status_type', 'success');
 } catch (\Exception $e) {
     return redirect()->back()->with('error', $e->getMessage());
 }
}
}